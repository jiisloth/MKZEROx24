// background removal effect By Charles Fettinger (https://github.com/Oncorporation)  4/2019
//Converted to OpenGL by Exeldro February 19, 2022
uniform float4x4 ViewProj;
uniform texture2d image;

uniform float elapsed_time;
uniform float2 uv_offset;
uniform float2 uv_scale;
uniform float2 uv_pixel_interval;
uniform float rand_f;
uniform float2 uv_size;
uniform string notes = "Opacity between 10 and 20 works. Adjust `Color` from white to fix environmental changes.\r\r\nUsage:\r\n1) Disable `Auto` settings like focus, white balance, etc.\r\n2) Take a video of just the background. \r\n3) Take a frame and use it as the background image. Windows Snipping Tool (%windir%\\system32\\SnippingTool.exe). \r\r\nThis eliminates differences based upon camera/video settings.";

uniform float testpoint_x = 0.5;
uniform float testpoint_y = 0.94;
uniform float testpoint_radius = 0.04;
uniform float4 color;
uniform float opacity = 40.0;
uniform bool invert;



sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
	float2 uv2 : TEXCOORD1;
};

float dot(float3 a,float3 b){
	return a.x*b.x+a.y*b.y+a.z*b.z;
}


VertDataOut VSDefault(VertDataIn v_in)
{
	VertDataOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.x, v_in.pos.y, v_in.pos.z, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	vert_out.uv2 = v_in.uv * uv_scale + uv_offset;
	return vert_out;
}

float4 PSColorMaskRGBA(VertDataOut v_in) : TARGET
{
	float Tolerance = opacity * 0.01;
	float4 rgba = image.Sample(textureSampler, v_in.uv);
	float4 targetRGB = (image.Sample(textureSampler, vec2(testpoint_x-testpoint_radius, testpoint_y-testpoint_radius)) + image.Sample(textureSampler, vec2(testpoint_x-testpoint_radius, testpoint_y+testpoint_radius)) + image.Sample(textureSampler, vec2(testpoint_x+testpoint_radius, testpoint_y+testpoint_radius)) +image.Sample(textureSampler, vec2(testpoint_x-testpoint_radius, testpoint_y+testpoint_radius)))*0.25;
	if (invert){
		targetRGB.rgb = 1.0 - targetRGB.rgb;
	}


	if (abs(targetRGB.r - rgba.r) <= Tolerance &&
		abs(targetRGB.g - rgba.g) <= Tolerance &&
		abs(targetRGB.b - rgba.b) <= Tolerance)
	{
		rgba.a = max(abs(targetRGB.r - rgba.r), max(abs(targetRGB.g - rgba.g), abs(targetRGB.b - rgba.b)))*3.0-1.0;
	}

	return rgba;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSColorMaskRGBA(v_in);
	}
}

